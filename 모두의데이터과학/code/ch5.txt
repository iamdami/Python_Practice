5장

import numpy as np
numbers = np.array(range(1, 11), copy=True)
members
---------------------------------------


ones = np.ones([2, 4], dtype=np.float64)
ones


zeros = np.zeros([2, 4], dtype=np.float64)
zeros


empty = np.empty([2, 4], dtype=np.float64)
# 배열의 내용물이 항상 0인 것은 아니다.
empty
---------------------------------------


ones.shape # 아직 변형되지 않았다면 원래 모양을 반환한다.


numbers.ndim # len(numbers.shape)와 같다.


zeros.dtype


eye = np.eye(3, k=1)
eye


np_numbers = np.arange(2, 5, 0.25)
np_numbers


np_inumbers = np_numbers.astype(np.int)
np_inumbers
---------------------------------------


sap = np.array(["MMM", "ABT", "ABBV", "ACN", "ACE", "ATVI", "ADBE", "ADT"])
sap


sap2d = sap.reshape(2, 4)
sap2d


sap3d = sap.reshape(2, 2, 2)
sap3d


sap2d.T


sap3d.swapaxes(1, 2)


sap3d.transpose((0, 2, 1))
---------------------------------------


dirty = np.array([9, 4, 1, -0.01, -0.02, -0.001])
whos_dirty = dirty < 0 # 불 배열을 불 인덱스로 사용한다.
whos_dirty


dirty[whos_dirty] = 0 # 모든 음수값을 0으로 바꾼다.
dirty


linear = np.arange(-1, 1.1, 0.2)
(linear <= 0.5) & (linear >= -0.5)


sap[[1, 2, -1]]


sap2d[:, [1]]
---------------------------------------

a = np.arange(4)
b = np.arange(1, 5)
a+b


a*5


noise = np.eye(4) + 0.01 * np.ones((4, ))
noise


noise = np.eye(4) + 0.01 * np.random.random([4, 4])
np.round(noise, 2)
---------------------------------------


stocks = np.array([140.49, 0.97, 40.68, 41.53, 55.7, 57.21, 98.2, 99.19, 109.96, 111.47, 35.71, 36.27, 87.85, 89.11, 30.22, 30.91])
stocks



stocks = stocks.reshape(8, 2).T
stocks


fall = np.greater(stocks[0], stocks[1])
fall


sap[fall]
---------------------------------------


# 새 MMM 주식 가격이 결측치라고 가정해보자.
stocks[1, 0] = np.nan
np.isnan(stocks)


stocks[np.isnan(stocks)] = 0
stocks
---------------------------------------


changes = np.where(np.abs(stocks[1] - stocks[0]) > 1.00,
                   stocks[1] - stocks[0], 0)
changes


sap[np.nonzero(changes)]


sap[np.abs(stocks[1] - stocks[0]) > 1.00]
---------------------------------------


sap[         np.abs(stocks[0] - stocks[1])
   > np.mean(np.abs(stocks[0] - stocks[1]))]

---------------------------------------
내려받은 예제 파일에 실습을 위한 interest.py 파일이 있습니다.

interest.py

import numpy as np
import matplotlib.pyplot as plt
import matplotlib

# This is a partial listing
RATE = .0375
TERM = 30
simple =   (     RATE  * np.ones(TERM)).cumsum()
compound = ((1 + RATE) * np.ones(TERM)).cumprod() - 1

matplotlib.style.use("ggplot")
t = np.arange(1, 31)
plt.plot(t, compound)
plt.plot(t, simple)
plt.legend(["Compound", "Simple"], loc=2)
plt.xlabel("Year")
plt.ylabel("Accrued Interest")
plt.tight_layout()
plt.savefig("interest.pdf")
---------------------------------------


dna = "AGTCCGCGAATACAGGCTCGGT"
dna_as_array = np.array(list(dna))
dna_as_array


np.unique(dna_as_array)


np.in1d(["MSFT", "MMM", "AAPL"], sap)
---------------------------------------
내려받은 예제 파일에 실습을 위한 numpy_sinewave.py 파일이 있습니다.

numpy_sinewave.py

# 필요한 라이브러리를 불러온다.
import numpy as np
import matplotlib.pyplot as plt
import matplotlib

# 신호, 잡음, 그리고 "악기" 정보를 상수로 정의한다.
SIG_AMPLITUDE = 10; SIG_OFFSET = 2; SIG_PERIOD = 100
NOISE_AMPLITUDE = 3
N_SAMPLES = 5 * SIG_PERIOD
INSTRUMENT_RANGE = 9

# 사인 곡선을 구성하고 잡음을 섞어 넣는다.
times = np.arange(N_SAMPLES).astype(float)
signal = SIG_AMPLITUDE * np.sin(2 * np.pi * times / SIG_PERIOD) + SIG_OFFSET
noise = NOISE_AMPLITUDE * np.random.normal(size=N_SAMPLES)
signal += noise

# # 음역대를 벗어난 스파이크를 제거한다.
signal[signal > INSTRUMENT_RANGE] = INSTRUMENT_RANGE
signal[signal < -INSTRUMENT_RANGE] = -INSTRUMENT_RANGE



# 결과를 플롯(plot)으로 시각화한다.
matplotlib.style.use("ggplot")
plt.plot(times, signal)
plt.title("Synthetic sine wave signal")
plt.xlabel("Time")
plt.ylabel("Signal + noise")
plt.ylim(ymin = -SIG_AMPLITUDE, ymax = SIG_AMPLITUDE)

# 플롯을 저장한다.
plt.savefig("signal.pdf")



